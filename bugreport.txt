
Integer Overflow/Underflow Bug Detected at Line: 3
Solution: Use SafeMath library to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 18
Solution: Use SafeMath library to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 23
Solution: Use SafeMath library to minimise vulnerbaility
Risk: High
Confidence: High

Loop Integer Overflow/Underflow Bug Detected at Line: 8
Solution: When using uint for/while loop avoid >= or <= that
could cause infinite loop. Instead use >, <, == or != loop operators
Risk: Medium
Confidence: Medium

Loop Integer Overflow/Underflow Bug Detected at Line: 13
Solution: When using uint for/while loop avoid >= or <= that
could cause infinite loop. Instead use >, <, == or != loop operators
Risk: Medium
Confidence: Medium

Loop Integer Overflow/Underflow Bug Detected at Line: 18
Solution: When using uint for/while loop avoid >= or <= that
could cause infinite loop. Instead use >, <, == or != loop operators
Risk: Medium
Confidence: Medium

Loop Integer Overflow/Underflow Bug Detected at Line: 18
Solution: Careful when using uint within loop as could cause infinite loop check no
constant true condition can evaluate
Risk: High
Confidence: Low

Loop Integer Overflow/Underflow Bug Detected at Line: 23
Solution: When using uint for/while loop avoid >= or <= that
could cause infinite loop. Instead use >, <, == or != loop operators
Risk: Medium
Confidence: Medium

Loop Integer Overflow/Underflow Bug Detected at Line: 23
Solution: Careful when using uint within loop as could cause infinite loop check no
constant true condition can evaluate
Risk: High
Confidence: Low

Integer Overflow/Underflow Bug Detected at Line: 7
Solution: Use SafeMath library operation .div to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 9
Solution: Use SafeMath library operation .div to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 12
Solution: Use SafeMath library operation .div to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 14
Solution: Use SafeMath library operation .div to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 17
Solution: Use SafeMath library operation .div to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 19
Solution: Use SafeMath library operation .div to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 22
Solution: Use SafeMath library operation .div to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 24
Solution: Use SafeMath library operation .div to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 27
Solution: Use SafeMath library operation .div to minimise vulnerbaility
Risk: High
Confidence: High

Integer Overflow/Underflow Bug Detected at Line: 29
Solution: Use SafeMath library operation .div to minimise vulnerbaility
Risk: High
Confidence: High

Reentracy Bug Detected in contract
Solution: Use a blockreentracy contract lock mechanism so only a single contract
function is executed
Risk: Medium
Confidence: Medium

Total Bug Points: 147
Smart Contract Score: 75%
